#! /bin/sh
#=========================================================#
# /usr/bin/findpart
# Libreria para Vegnux NeonatoX OS
# Proyecto Venezolano VegnuX <http://www.vegnux.org.ve>
# Por:
# Carlos SÃ¡nchez <mkl.vegnux@gmail.com>
# Nehemias Velasquez <nehe009@gmail.com>
# 2007 - 2012
# GPLv3
# This program comes with ABSOLUTELY NO WARRANTY.
#=========================================================#

if [[ "${UID}" != "0" ]]; then
	echo "No eres usuario Root" 
	exit 1
fi
#Carga archivo de configuracion.
prefix="/usr/lib"
neonatoxutils_conf="${prefix}/libneonatox/libneonatox.conf"
if [[ -e "${neonatoxutils_conf}" ]]; then
	source "${neonatoxutils_conf}" 2> /dev/null
else
	echo " * No existe ${neonatoxutils_conf} *"
fi
neonatoxutils_functions="${prefix}/libneonatox/libneonatoxtools"
if [[ -e "${neonatoxutils_functions}" ]]; then
	source "${neonatoxutils_functions}" 2> /dev/null
else
	echo " * No existe ${neonatoxutils_functions} *"
fi

if [[ -e "/usr/lib/grub/grub-mkconfig_lib" ]]; then
	. /usr/lib/grub/grub-mkconfig_lib 2> /dev/null #Se instala con GRUB2. 
else
	echo " * No esta instalado GRUB2 *"
fi


#actualiza configuracion de /boot/grub/grub.cfg
function update_grub() 
{

if [ -e "/boot/grub/grub.cfg" ]; then   #crea respaldo del antiguo grub.cfg
	cp /boot/grub/grub.cfg /boot/grub/grub.old
	rm -f /boot/grub/grub.cfg
fi

cat << EOT > /boot/grub/grub.cfg
# Config file for GRUB2 - The GNU GRand Unified Bootloader
# /boot/grub/grub.cfg
# File generated by $programa $version
#
set timeout=15
set default=0
set lang=es
insmod gettext

if [ -e "/usr/share/grub/fonts/unifont.pf2" ]; then
	loadfont /usr/share/grub/fonts/unifont.pf2
	loadfont /usr/share/grub/fonts/10x20.pf2
	insmod vbe
	insmod gfxterm
	set gfxmode="1280x800;1024x768;800x600;640x480"
	terminal_output gfxterm
	insmod png
	background_image /boot/neonatox.png
else 
	echo "Loading Linux .........."
fi

EOT


#chequear todos los sistemas linux.
function check_ALL_LINUX (){
# se utiliza udisks para mountar los discos automaticamente en sus
# respectivos puntos de montaje para detectar la mayor cantidad de SOs posibles...
devls=$(ls -1 /dev/disk/by-uuid/* 2> /dev/null | sed 's@/dev/disk/by-uuid/@@g')
for mountmp in $devls; do
	$(udisks --mount  /dev/disk/by-uuid/$mountmp) 2>/dev/null
done
dirlist=$(mount -l | grep ^/dev/[hs] | cut -d ' ' -f 3)
for dir in $dirlist; do
export dir=$dir
list=`for i in $dir/boot/vmlinu[xz]-* /vmlinu[xz]-* ; do
        if grub_file_is_not_garbage "$i" ; then echo -n "$i " ; fi
      done`
#Chequear por linux.
while [ "x$list" != "x" ] ; do
  linux=`version_find_latest $list`
  echo "Encontrada imagen de Linux en: $linux" >&2
  basename=`basename $linux`
  dirname=`dirname $linux`
  rel_dirname=`make_system_path_relative_to_its_root ${dirname}`
  version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
  alt_version=`echo $version | sed -e "s,\.old$,,g"`
  for i in "initrd.img-${version}" "initrd-${version}.img" \
	   "initrd-${version}" "initrd.img-${alt_version}" \
	   "initrd-${alt_version}.img" "initrd-${alt_version}"; do
    if test -e "${dirname}/${i}" ; then
      initrd="$i"
      break
    fi
  done
  if test -n "${initrd}" ; then
    echo "Encontrada imagen initrd en: ${dirname}/${initrd}" >&2
    if_initrd="initrd ${dirname}/${initrd}"
  else
	echo ""
  fi
GRUB_DRIVE="`${grub_probe} --target=drive "${dir}" 2>/dev/null`"
GRUB_DEVICE="`${grub_probe} --target=device "${dir}" 2>/dev/null`"

if [[ -f ${dir}/etc/lsb-release ]];then
# obtiene la version del otro SO linux
. $dir/etc/lsb-release
cat << EOF >> /boot/grub/grub.cfg 
menuentry "$DISTRIB_DESCRIPTION (on $GRUB_DEVICE) linux $version" --class gnu-linux --class gnu --class os {
	insmod part_msdos
	insmod ext2
	set root=$GRUB_DRIVE
	linux /boot/$basename root=$GRUB_DEVICE ro
	$if_initrd
}
menuentry "$DISTRIB_DESCRIPTION (recovery mode) (on $GRUB_DEVICE) linux $version" --class gnu-linux --class gnu --class os {
	insmod part_msdos
	insmod ext2
	set root=$GRUB_DRIVE
	linux /boot/$basename root=$GRUB_DEVICE ro single
	$if_initrd
}
EOF
else
# si no se consigue la version se crea una entrada generica
cat << EOF >> /boot/grub/grub.cfg 
menuentry "GNU/Linux (on $GRUB_DEVICE) linux $version" --class gnu-linux --class gnu --class os {
	insmod part_msdos
	insmod ext2
	set root=$GRUB_DRIVE
	linux /boot/$basename root=$GRUB_DEVICE ro
	$if_initrd
}
EOF
fi
list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
done
done
}
check_ALL_LINUX

#chequear otros sistemas no linux.
function check_OSWINDOWS(){
devls=$(ls -1 /dev/disk/by-uuid/* 2> /dev/null | sed 's@/dev/disk/by-uuid/@@g')
for mountmp in $devls; do
	$(udisks --mount  /dev/disk/by-uuid/$mountmp) 2>/dev/null
done
#dirlist=$(mount -l | grep ^/dev/[hs] | cut -d ' ' -f 3)
for dir in /media/*?* ; do
  # Chequea para Vista/Seven bootmgr.
  if [[ -f ${dir}/bootmgr ]] ; then
    OS_F="Microsoft Windows Vista/Seven"
  # Chequea para NT/2000/XP NTLDR.
  elif [[ -f ${dir}/ntldr ]] ; then
    OS_F="Microsoft Windows NT/2000/XP"
	else
    continue
  fi
	GRUB_DRIVE="`${grub_probe} --target=drive "${dir}" 2>/dev/null`"
	GRUB_DEVICE="`${grub_probe} --target=device "${dir}" 2>/dev/null`"
	echo "Encontrado $OS_F en $GRUB_DEVICE $GRUB_DRIVE" >&2
cat << EOF >> /boot/grub/grub.cfg 
menuentry "$OS_F (on $GRUB_DEVICE)" --class windows --class os {
	insmod part_msdos
	set root=$GRUB_DRIVE
	chainloader +1
}
EOF
done
}
check_OSWINDOWS

if [ -e "/boot/grub/grub.cfg" ]; then
	continue
else
	echo "$red No se pudo crear /boot/grub/grub.cfg $normal"
	echo "$red Pude que no tenga GRUB2 instalado en esta particion. $normal" 
fi

ok_fail "Error creando /boot/grub/grub.cfg"

echo "Archivo de configuracion de GRUB2 creado en /boot/grub/grub.cfg"
}

update_grub
